// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package set

type ()

type StringSet struct {
	items map[string]struct{}
}

func NewStringSet(values ...string) *StringSet {
	set := &StringSet{items: map[string]struct{}{}}
	for _, value := range values {
		set.Put(value)
	}
	return set
}

func (set *StringSet) Has(value string) bool {
	_, ok := set.items[value]
	return ok
}

func (set *StringSet) Put(value string) {
	set.items[value] = struct{}{}
}

func (set *StringSet) Delete(value string) {
	delete(set.items, value)
}

func (set *StringSet) List() []string {
	slice := make([]string, len(set.items))
	i := 0
	for value := range set.items {
		slice[i] = value
		i++
	}
	return slice
}

type ()

type IntSet struct {
	items map[int]struct{}
}

func NewIntSet(values ...int) *IntSet {
	set := &IntSet{items: map[int]struct{}{}}
	for _, value := range values {
		set.Put(value)
	}
	return set
}

func (set *IntSet) Has(value int) bool {
	_, ok := set.items[value]
	return ok
}

func (set *IntSet) Put(value int) {
	set.items[value] = struct{}{}
}

func (set *IntSet) Delete(value int) {
	delete(set.items, value)
}

func (set *IntSet) List() []int {
	slice := make([]int, len(set.items))
	i := 0
	for value := range set.items {
		slice[i] = value
		i++
	}
	return slice
}
